---
import ChevronUp from '@svg/Symbols/ChevronUp.astro';
import ChevronDown from '@svg/Symbols/ChevronDown.astro';

const mainSkills = [
  {
    title: 'Frontend Developer',
    description: `My goal is to create interfaces that are easy to use and navigate for all types of users. I work hard to make sure that the design is accessible and meets the needs of the target audience. Once the design is finalized, I bring it to life by coding it into a web browser format, making it viewable and interactive for all users. Seeing my work come to life and being used by real people drives me forward. Knowing that I've helped make someone's life easier or a little bit better makes all the hard work worth it.`,
    image: {
      alt: 'Website layout picture',
      scr: './Frontend/FrontendPicture.png',
      height: '100',
      width: '135',
      source: [
        {
          srcset: './Frontend/FrontendPicture.webp',
          type: 'image/webp',
        },
      ],
    },
  },
  {
    title: 'Backend Developer',
    description: `My top priority is ensuring that web applications run smoothly and securely behind the scenes. Think of it like building a strong foundation for a house - if the foundation is solid, the rest will be too. I create the "brains" of an app or website, including the database that stores all the data, the server that processes requests and sends responses, and the APIs (application programming interfaces) that allow different parts of the app to talk to each other.`,
    image: {
      alt: 'Laptop with terminal open picture',
      scr: './Backend/BackendPicture.png',
      height: '100',
      width: '150',
      source: [
        {
          srcset: './Backend/BackendPicture.webp',
          type: 'image/webp',
        },
      ],
    },
  },
  {
    title: 'Electrical Engineer',
    description: `As an electrical and embedded systems developer, I get to work on some pretty awesome projects! My job is to take designs and turn them into working prototypes, making sure everything is running smoothly from start to finish. Whenever something goes wrong, I get to put on my troubleshooting hat and find solutions to any issues. Safety is my top priority, so I always make sure that the electrical systems I work on are efficient and meet the necessary specifications. Testing is also a big part of my job, ensuring everything works perfectly before it's ready to go.`,
    image: {
      alt: 'Breadboard with electrical components',
      scr: './ElectricalEngineer/ElectricalEngineer.png',
      height: '100',
      width: '150',
      source: [
        {
          srcset: './ElectricalEngineer/ElectricalEngineer.webp',
          type: 'image/webp',
        },
      ],
    },
  },
];
---

<section id='main-skills' class='mt-28'>
  <h2>Main Skills</h2>

  <ul class='cards'>
    {
      mainSkills.map((item) => {
        const { image } = item;

        return (
          <li class='card border-light dark:border-dark'>
            <picture>
              {image.source.map((itemSource) => {
                return (
                  <source srcset={itemSource.srcset} type={itemSource.type} />
                );
              })}

              <img
                class='m-auto'
                height={image.height}
                width={image.width}
                src={image.scr}
                alt={image.alt}
              />
            </picture>

            <h3>{item.title}</h3>
            <p class='text-fontLightGray2 dark:text-fontDarkGray3 main-skills_description'>
              {item.description}
            </p>
            <button class='btn-read-more hover:text-btnLight dark:hover:text-btnDark'>
              <span class='btn-read-more-text'>Read more</span>
              <ChevronDown
                class='btn-read-more-open'
                width='17px'
                height='17px'
              />
              <ChevronUp
                class='btn-read-more-close hidden'
                width='17'
                height='17'
              />
            </button>
          </li>
        );
      })
    }
  </ul>
</section>

<style>

  h3 {
    margin-top: 2rem;
    font-size: clamp(1.8rem, 4vw, 2rem);
    font-weight: 600;
    text-align: center;
  }

  p {
    margin-top: 2rem;
    font-size: clamp(1.4rem, 2.5vw, 1.6rem);
  }

  .cards {
    display: flex;
    gap: 3rem;
    justify-content: space-between;
    align-items: flex-start;
    flex-wrap: wrap;
  }

  .card {
    display: flex;
    flex-direction: column;
    margin-top: 4rem;
    border: 2px solid;
    border-radius: 10px;
    padding: 2rem 2rem;
    max-width: 35rem;
  }

  svg {
    margin-top: 2rem;
    margin: 0 auto;
  }

  button {
    display: flex;
    align-items: center;
    font-weight: 600;
  }

  button svg {
    margin: 0;
    margin-left: 1rem;
    transition: all 200ms ease-in;
  }

  .btn-read-more {
    display: inline-flex;
    margin-top: 2rem;
    font-size: 1.4rem;
  }
</style>

<script>
  const maxNumberCharacters = 200;
  const descriptionParagraphs = document.querySelectorAll(
    '.main-skills_description'
  )!;
  const descriptionButtons = document.querySelectorAll('.btn-read-more')!;

  descriptionParagraphs.forEach((paragraph) => {
    if (!paragraph.textContent) return;

    if (paragraph.textContent.length < maxNumberCharacters) {
    } else {
      const textContent = paragraph.textContent.slice(0, maxNumberCharacters);
      const moreTextContent = paragraph.textContent.slice(maxNumberCharacters);
      paragraph.innerHTML = `${textContent}<span class="read-more-dots">...</span><span class="hidden read-more-text">${moreTextContent}</span>`;
    }
  });

  descriptionButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const paragraph = button.parentElement! as HTMLDivElement;
      if (!paragraph) return;

      paragraph.querySelector('.read-more-dots')?.classList.toggle('hidden');
      paragraph.querySelector('.read-more-text')?.classList.toggle('hidden');
      paragraph
        .querySelector('.btn-read-more-open')
        ?.classList.toggle('hidden');
      paragraph
        .querySelector('.btn-read-more-close')
        ?.classList.toggle('hidden');

      const buttonText = paragraph.querySelector('.btn-read-more-text');
      if (!buttonText) return;

      buttonText.textContent?.startsWith('Read more')
        ? (buttonText.textContent = 'Read less')
        : (buttonText.textContent = 'Read more');
    });
  });
</script>
