---
import ChevronUp from '../svg/Symbols/ChevronUp.astro';
import ChevronDown from '../svg/Symbols/ChevronDown.astro';

const mainSkills = [
  {
    title: 'Frontend Developer',
    description: `My goal is to create interfaces that are easy to use and navigate for
        all types of users. I work hard to make sure that the design is
        accessible and meets the needs of the target audience. Once the design
        is finalized, I bring it to life by coding it into a web browser format,
        making it viewable and interactive for all users.`,
    image: {
      alt: 'Website layout picture',
      scr: './Frontend/FrontendPicture.png',
      height: '100',
      width: '135',
      source: [
        {
          srcset: './Frontend/FrontendPicture.webp',
          type: 'image/webp',
        },
      ],
    },
  },
  {
    title: 'Backend Developer',
    description: `My focus is to make sure that the behind-the-scenes of the web
        application is safe, reliable, and works well. I'm in charge of creating
        and managing the infrastructure and database that powers the frontend of
        the web application. This includes making sure that the web application
        is scalable and performs efficiently, as well as making sure that the
        security of the web application is top-notch.`,
    image: {
      alt: 'Laptop with terminal open picture',
      scr: './Backend/BackendPicture.png',
      height: '100',
      width: '150',
      source: [
        {
          srcset: './Backend/BackendPicture.webp',
          type: 'image/webp',
        },
      ],
    },
  },
  {
    title: 'Electrical Engineer',
    description: `I get to work on some really cool projects! I'm responsible for
        developing and creating prototypes of electrical systems, control
        systems, and embedded systems. Whenever something goes wrong, I get to
        put on my troubleshooting hat and find solutions to any issues that come
        up. Safety is a top priority for me, so I always make sure that the
        electrical systems I work on are both efficient and meet the necessary
        specifications. Testing is also a big part of my job, making sure
        everything is working perfectly before it's ready to go.`,
    image: {
      alt: 'Breadboard with electrical components',
      scr: './ElectricalEngineer/ElectricalEngineer.png',
      height: '100',
      width: '150',
      source: [
        {
          srcset: './ElectricalEngineer/ElectricalEngineer.webp',
          type: 'image/webp',
        },
      ],
    },
  },
];
---

<section id='main-skills' class='mt-28'>
  <h2>Main Skills</h2>

  <div class='cards'>
    {
      mainSkills.map((item) => {
        const { image } = item;

        return (
          <div class='card border-light dark:border-dark'>
            <picture>
              {image.source.map((itemSource) => {
                return (
                  <source srcset={itemSource.srcset} type={itemSource.type} />
                );
              })}

              <img
                class='m-auto'
                height={image.height}
                width={image.width}
                src={image.scr}
                alt={image.alt}
              />
            </picture>

            <h3>{item.title}</h3>
            <p class='text-fontLightGray2 dark:text-fontDarkGray3 main-skills_description'>
              {item.description}
            </p>
            <button class='btn-read-more hover:text-btnLight dark:hover:text-btnDark'>
              <span class='btn-read-more-text'>Read more</span>
              <ChevronDown
                class='btn-read-more-open'
                width='17px'
                height='17px'
              />
              <ChevronUp
                class='btn-read-more-close hidden'
                width='17'
                height='17'
              />
            </button>
          </div>
        );
      })
    }
  </div>
</section>

<style>
  h2 {
    font-size: clamp(2.5rem, 4vw, 3.5rem);
    font-weight: 600;
  }

  h3 {
    margin-top: 2rem;
    font-size: clamp(1.8rem, 4vw, 2rem);
    font-weight: 600;
    text-align: center;
  }

  p {
    margin-top: 2rem;
    font-size: clamp(1.4rem, 2.5vw, 1.6rem);
  }

  .cards {
    display: flex;
    gap: 1rem;
    justify-content: space-between;
    align-items: flex-start;
    flex-wrap: wrap;
  }

  .card {
    display: flex;
    flex-direction: column;
    margin-top: 4rem;
    border: 2px solid;
    border-radius: 10px;
    padding: 2rem 2rem;
    max-width: 350px;
  }

  svg {
    margin-top: 2rem;
    margin: 0 auto;
  }

  button {
    display: flex;
    align-items: center;
    font-weight: 600;
  }

  button svg {
    margin: 0;
    margin-left: 1rem;
    transition: all 200ms ease-in;
  }

  .btn-read-more {
    display: inline-flex;
    margin-top: 2rem;
    font-size: 1.4rem;
  }
</style>

<script>
  const maxNumberCharacters = 200;
  const descriptionParagraphs = document.querySelectorAll(
    '.main-skills_description'
  )!;
  const descriptionButtons = document.querySelectorAll('.btn-read-more')!;

  descriptionParagraphs.forEach((paragraph) => {
    if (!paragraph.textContent) return;

    if (paragraph.textContent.length < maxNumberCharacters) {
    } else {
      const textContent = paragraph.textContent.slice(0, maxNumberCharacters);
      const moreTextContent = paragraph.textContent.slice(maxNumberCharacters);
      paragraph.innerHTML = `${textContent}<span class="read-more-dots">...</span><span class="hidden read-more-text">${moreTextContent}</span>`;
    }
  });

  descriptionButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const paragraph = button.parentElement! as HTMLDivElement;
      if (!paragraph) return;

      paragraph.querySelector('.read-more-dots')?.classList.toggle('hidden');
      paragraph.querySelector('.read-more-text')?.classList.toggle('hidden');
      paragraph
        .querySelector('.btn-read-more-open')
        ?.classList.toggle('hidden');
      paragraph
        .querySelector('.btn-read-more-close')
        ?.classList.toggle('hidden');

      const buttonText = paragraph.querySelector('.btn-read-more-text');
      if (!buttonText) return;

      buttonText.textContent?.startsWith('Read more')
        ? (buttonText.textContent = 'Read less')
        : (buttonText.textContent = 'Read more');
    });
  });
</script>
